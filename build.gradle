plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'net.ltgt.errorprone' version '1.1.1'
    id 'net.ltgt.nullaway' version '1.0.1'
    id 'de.aaschmid.cpd' version '3.1'
    id 'com.github.spotbugs' version '4.0.5'
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

group 'de.cotto'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    errorprone 'com.google.errorprone:error_prone_core:latest.release'
    errorprone 'com.uber.nullaway:nullaway:latest.release'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:latest.release'
    testImplementation 'org.assertj:assertj-core:latest.release'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:latest.release'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:latest.release'
}

tasks.withType(JavaCompile) {
    options.errorprone.nullaway {
        severity = net.ltgt.gradle.errorprone.CheckSeverity.ERROR
        excludedFieldAnnotations.add('org.mockito.Mock')
        excludedFieldAnnotations.add('org.mockito.InjectMocks')
    }
    options.compilerArgs << "-Werror"
}

test {
    useJUnitPlatform()
    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.SKIPPED) {
            throw new GradleException("Do not ignore test cases")
        }
    }
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

nullaway {
    annotatedPackages.add('de.cotto')
}

pmd {
    toolVersion = '6.22.0'
    ruleSetFiles = files('config/pmd-ruleset.xml')
    ruleSets = []
}

checkstyle {
    toolVersion 'latest.release'
    maxWarnings = 0
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

spotbugsMain.reports.configure {
    xml.enabled = false
    html.enabled = true
}
spotbugsTest.reports.configure {
    xml.enabled = false
    html.enabled = true
}